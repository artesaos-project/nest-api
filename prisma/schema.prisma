generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ARTISAN
  MODERATOR
  ADMIN
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  roles      Roles[]
  name       String
  phone      String
  socialName String?  @map("social_name")
  avatar     String?
  isDisabled Boolean  @default(false) @map("is_disabled")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  profile                         UserProfile?
  Session                         Session[]
  artisanCreationRequestsSent     ArtisanApplication[] @relation("userRequesting")
  artisanCreationRequestsReviewed ArtisanApplication[] @relation("userReviewer")
  Attachment                      Attachment[]
  ArtisanProfile                  ArtisanProfile?
  ProductRating                   ProductRating[]
  ProductLike                     ProductLike[]

  @@map("users")
  Report Report[]
  ReportUser ReportUser[]
}

model Session {
  id         String    @id @default(uuid())
  userId     String    @map("fk_user_id")
  isRevoked  Boolean   @default(false) @map("is_revoked")
  startedAt  DateTime  @default(now()) @map("started_at")
  expiresAt  DateTime  @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  ipHost     String    @map("ip_host")
  userAgent  String    @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRevoked])
  @@map("sessions")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("fk_user_id")
  cpf       String?  @unique
  phone     String   @unique
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum FormStatus {
  NOT_STARTED
  SUBMITTED
  POSTPONED
}

enum ApplicationType {
  BE_ARTISAN
  DISABLE_PROFILE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model ArtisanApplication {
  id                     String          @id @default(uuid())
  userId                 String          @map("fk_user_id")
  formStatus             FormStatus      @default(NOT_STARTED) @map("form_status")
  type                   ApplicationType @default(BE_ARTISAN) @map("type")
  rawMaterial            String[]        @map("raw_material")
  technique              String[]
  finalityClassification String[]        @map("finality_classification")
  bio                    String?
  sicab                  String?
  sicabRegistrationDate  DateTime?       @map("sicab_registration_date")
  sicabValidUntil        DateTime?       @map("sicab_valid_until")
  status                 RequestStatus   @default(PENDING)
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @default(now()) @map("updated_at")
  reviewerId             String?         @map("fk_user_reviewer_id")
  rejectionReason        String?

  userRequesting User         @relation(fields: [userId], references: [id], name: "userRequesting")
  userReviwer    User?        @relation(fields: [reviewerId], references: [id], name: "userReviewer")
  Attachment     Attachment[]

  @@index([userId, status])
  @@map("artisan_applications")
}

model ArtisanProfile {
  id                     String   @id @default(uuid())
  userId                 String   @unique @map("fk_user_id")
  artisanUserName        String   @unique @map("artisan_user_name")
  rawMaterial            String[] @map("raw_material")
  technique              String[]
  finalityClassification String[] @map("finality_classification")
  sicab                  String
  sicabRegistrationDate  DateTime @map("sicab_registration_date")
  sicabValidUntil        DateTime @map("sicab_valid_until")
  followersCount         Int      @default(0) @map("followers_count")
  productsCount          Int      @default(0) @map("products_count")
  bio                    String?
  isDisabled             Boolean  @default(false) @map("is_disabled")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product Product[]

  @@map("artisan_profiles")
}

model RawMaterial {
  id          BigInt   @id @default(autoincrement())
  nameFilter  String   @unique @map("name_filter")
  nameExhibit String   @map("name_exhibit")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("raw_materials")
}

model Technique {
  id          BigInt   @id @default(autoincrement())
  nameFilter  String   @unique @map("name_filter")
  nameExhibit String   @map("name_exhibit")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("techniques")
}

model ProductCategory {
  id             BigInt   @id @default(autoincrement())
  nameFilter     String   @unique @map("name_filter")
  nameExhibit    String   @map("name_exhibit")
  imagePath      String?  @map("image_path")
  description    String?
  rawMaterialIds BigInt[] @map("raw_material_ids")
  techniqueIds   BigInt[] @map("technique_ids")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("product_categories")
}

model Product {
  id            String   @id @default(uuid())
  artisanId     String   @map("fk_artisan_id")
  categoryIds   BigInt[] @map("category_ids")
  title         String
  description   String
  priceInCents  BigInt   @map("price_in_cents")
  stock         Int      @default(0)
  coverImageId  String?  @unique @map("fk_cover_image_id")
  isActive      Boolean  @default(true) @map("is_active")
  slug          String   @unique
  viewsCount    Int      @default(0) @map("views_count")
  likesCount    Int      @default(0) @map("likes_count")
  averageRating Float?   @map("average_rating")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  artisan           ArtisanProfile   @relation(fields: [artisanId], references: [userId])
  ratings           ProductRating[]
  likes             ProductLike[]
  coverImage        Attachment?      @relation("ProductCoverImage", fields: [coverImageId], references: [id])
  images            Attachment[]     @relation("ProductImages")
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId BigInt?

  @@index([artisanId, isActive])
  @@index([slug])
  @@map("products")
  ReportProduct ReportProduct[]
}

model ProductRating {
  id        String   @id @default(uuid())
  productId String   @map("fk_product_id")
  userId    String   @map("fk_user_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("product_ratings")
  ReportProductRating ReportProductRating[]
}

model ProductLike {
  id        String   @id @default(uuid())
  productId String   @map("fk_product_id")
  userId    String   @map("fk_user_id")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("product_likes")
}

model Attachment {
  id                   String   @id @default(uuid())
  userId               String?  @map("fk_user_id")
  artisanApplicationId String?  @map("fk_artisan_application_id")
  productId            String?  @map("fk_product_id")
  fileType             String   @map("file_type")
  fileSize             BigInt   @map("file_size")
  createdAt            DateTime @default(now()) @map("created_at")

  user               User?               @relation(fields: [userId], references: [id])
  artisanApplication ArtisanApplication? @relation(fields: [artisanApplicationId], references: [id])
  productCover       Product?            @relation("ProductCoverImage")
  productImages      Product?            @relation("ProductImages", fields: [productId], references: [id])

  @@index([userId, artisanApplicationId])
  @@map("attachments")
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  OFFENSIVE_CONTENT
  FALSE_OR_MISLEADING_INFORMATION
  COPYRIGHT_VIOLATION
  PROHIBITED_ITEM_SALE_OR_DISCLOSURE
  INAPPROPRIATE_LANGUAGE
  OFF_TOPIC_OR_IRRELEVANT
  OTHER
}

model Report {
  id           String       @id @default(uuid())
  reporterId   String       @map("fk_reporter_id")
  reason       ReportReason
  description  String?
  isSolved     Boolean      @default(false) @map("is_solved")
  isDeleted    Boolean      @default(false) @map("is_deleted")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  reporter     User                @relation(fields: [reporterId], references: [id])
  product      ReportProduct?
  productRating ReportProductRating?

  @@map("reports")
  ReportUser ReportUser[] @relation("ReportToUser")
}

model ReportUser {
  reportId       String @id @map("fk_report_id")
  reportedUserId String @map("fk_reported_user_id")
  reporterId     String

  report Report @relation("ReportToUser", fields: [reportId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [reportedUserId], references: [id])

  @@unique([reporterId, reportedUserId], name: "uniq_reporter_user")
  @@map("reports_users")
}

model ReportProduct {
  reportId  String @id @map("fk_report_id")
  productId String @map("fk_product_id")
  reporterId String

  report  Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([reporterId, productId], name: "uniq_reporter_product")
  @@map("reports_products")
}

model ReportProductRating {
  reportId        String @id @map("fk_report_id")
  productRatingId String @map("fk_product_rating_id")
  reporterId      String

  report        Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  productRating ProductRating @relation(fields: [productRatingId], references: [id])

  @@unique([reporterId, productRatingId], name: "uniq_reporter_rating")
  @@map("reports_product_ratings")
}